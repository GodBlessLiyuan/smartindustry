<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.smartindustry.common.mapper.am.DeptMapper">
    <resultMap id="BaseResultMap" type="com.smartindustry.common.pojo.am.DeptPO">
        <id column="dept_id" jdbcType="BIGINT" property="deptId"/>
        <result column="parent_id" jdbcType="BIGINT" property="parentId"/>
        <result column="dept_code" jdbcType="CHAR" property="deptCode"/>
        <result column="dept_name" jdbcType="CHAR" property="deptName"/>
        <result column="user_id" jdbcType="BIGINT" property="userId"/>
        <result column="dept_desc" jdbcType="CHAR" property="deptDesc"/>
        <result column="status" jdbcType="TINYINT" property="status"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="dr" jdbcType="TINYINT" property="dr"/>
    </resultMap>
    <sql id="Base_Column_List">
    dept_id, parent_id, dept_name, dept_code, user_id, dept_desc, `status`, create_time, update_time,
    dr
  </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from am_dept
        where dept_id = #{deptId,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from am_dept
    where dept_id = #{deptId,jdbcType=BIGINT}
  </delete>
    <insert id="insert" parameterType="com.smartindustry.common.pojo.am.DeptPO" useGeneratedKeys="true"
            keyProperty="deptId">
    insert into am_dept (dept_id, parent_id, dept_name, dept_code,
      user_id, dept_desc, `status`, 
      create_time, update_time, dr
      )
    values (#{deptId,jdbcType=BIGINT}, #{parentId,jdbcType=BIGINT}, #{deptName,jdbcType=CHAR}, #{deptCode,jdbcType=CHAR},
      #{userId,jdbcType=BIGINT}, #{deptDesc,jdbcType=CHAR}, #{status,jdbcType=TINYINT}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{dr,jdbcType=TINYINT}
      )
  </insert>
    <insert id="insertSelective" parameterType="com.smartindustry.common.pojo.am.DeptPO">
        insert into am_dept
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="deptId != null">
                dept_id,
            </if>
            <if test="parentId != null">
                parent_id,
            </if>
            <if test="deptName != null">
                dept_name,
            </if>
            <if test="deptCode != null">
                dept_code,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="deptDesc != null">
                dept_desc,
            </if>
            <if test="status != null">
                `status`,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="dr != null">
                dr,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="deptId != null">
                #{deptId,jdbcType=BIGINT},
            </if>
            <if test="parentId != null">
                #{parentId,jdbcType=BIGINT},
            </if>
            <if test="deptName != null">
                #{deptName,jdbcType=CHAR},
             </if>
            <if test="deptCode != null">
                #{deptCode,jdbcType=CHAR},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=BIGINT},
            </if>
            <if test="deptDesc != null">
                #{deptDesc,jdbcType=CHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=TINYINT},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="dr != null">
                #{dr,jdbcType=TINYINT},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.smartindustry.common.pojo.am.DeptPO">
        update am_dept
        <set>
            <if test="parentId != null">
                parent_id = #{parentId,jdbcType=BIGINT},
            </if>
            <if test="deptName != null">
                dept_name = #{deptName,jdbcType=CHAR},
            </if>
            <if test="deptCode != null">
                dept_code = #{deptCode,jdbcType=CHAR},
            </if>
            <if test="userId != null">
                user_id = #{userId,jdbcType=BIGINT},
            </if>
            <if test="deptDesc != null">
                dept_desc = #{deptDesc,jdbcType=CHAR},
            </if>
            <if test="status != null">
                `status` = #{status,jdbcType=TINYINT},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="dr != null">
                dr = #{dr,jdbcType=TINYINT},
            </if>
        </set>
        where dept_id = #{deptId,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.smartindustry.common.pojo.am.DeptPO">
    update am_dept
    set parent_id = #{parentId,jdbcType=BIGINT},
      dept_name = #{deptName,jdbcType=CHAR},
      dept_code = #{deptCode,jdbcType=CHAR},
      user_id = #{userId,jdbcType=BIGINT},
      dept_desc = #{deptDesc,jdbcType=CHAR},
      `status` = #{status,jdbcType=TINYINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      dr = #{dr,jdbcType=TINYINT}
    where dept_id = #{deptId,jdbcType=BIGINT}
  </update>

    <resultMap id="BOResultMap" type="com.smartindustry.common.bo.am.DeptBO" extends="BaseResultMap">
        <result column="username" jdbcType="CHAR" property="username"/>
        <result column="parentName" jdbcType="CHAR" property="parentName"/>
    </resultMap>
    <sql id="BO_Column_List">
        d.dept_id, d.parent_id, d.dept_name, d.user_id, d.dept_desc, d.`status`, d.create_time, d.update_time,d.dept_code,
    d.dr,u.name as username,d2.dept_name as parentName
    </sql>

    <select id="getBOByPri" parameterType="java.lang.Long" resultMap="BOResultMap">
        select
        <include refid="BO_Column_List"/>
        from am_dept d
        left join am_user u on d.user_id = u.user_id
        left join am_dept d2 on d.parent_id = d2.dept_id
        where d.dr = 1 and d.dept_id=#{did}
    </select>

    <select id="deptPageQuery" parameterType="java.util.Map" resultMap="BOResultMap">
        select
        <include refid="BO_Column_List"/>
        from am_dept d
        left join am_user u on d.user_id = u.user_id
        left join am_dept d2 on d.parent_id = d2.dept_id
        where d.dr = 1
        <if test="dname != null and dname != ''">
            and d.dept_name like concat('%',#{dname,jdbcType=CHAR},'%')
        </if>
        <if test="status != null and status != 0">
            and d.`status` = #{status,jdbcType=TINYINT}
        </if>
        <if test="ctime != null">
            and d.create_time &gt; #{ctime, jdbcType=TIMESTAMP}
        </if>
        order by d.create_time desc
    </select>

    <!--  批量禁用部门-->
    <update id="updateBatch" parameterType="java.util.List">
        update am_dept
        set `status` = case dept_id
        <foreach collection="list" item="item">
            when #{item.deptId,jdbcType=BIGINT} then #{item.status,jdbcType=TINYINT}
        </foreach>
        end
        where dept_id in
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item.deptId,jdbcType=BIGINT}
        </foreach>
    </update>

    <update id="deleteBatch" parameterType="java.util.List">
        update am_dept
        set dr = case dept_id
        <foreach collection="list" item="did">
            when #{did,jdbcType=BIGINT} then 2
        </foreach>
        end
        where dept_id in
        <foreach collection="list" item="did" open="(" separator="," close=")">
            #{did,jdbcType=BIGINT}
        </foreach>
    </update>

    <select id="queryChildren" parameterType="java.lang.Long" resultType="com.smartindustry.common.bo.am.DeptBO">
        select d.dept_id as deptId,d.parent_id as parentId,d.status as status,d.dept_name as deptName,u.username as
        username,d1.dept_name as parentName
        from am_dept d
        left join am_user u on d.user_id = u.user_id
        left join am_dept d1 on d.parent_id = d1.dept_id
        <choose>
            <when test="parentId != null and parentId !=''">
                where d.parent_id = #{parentId,jdbcType=BIGINT} and d.dr = 1
            </when>
            <otherwise>
                where d.parent_id is null and d.dr = 1
            </otherwise>
        </choose>
    </select>

    <!--  判断当前部门id不是其他部门的父节点id-->
    <select id="judgeExist" parameterType="java.lang.Long" resultType="java.lang.Integer">
     select case when exists(SELECT 1 from am_dept where parent_id = #{parentId,jdbcType=BIGINT} limit 1)
     then 1
     else 0 end as result
  </select>

    <!--  判断当前的部门name是否重复-->
    <select id="judgeRepeatName" resultType="java.lang.Integer">
        select case when exists(SELECT 1 from am_dept
        where dept_name = #{deptName,jdbcType=CHAR}
        <if test="deptId != null">
            and dept_id != #{deptId,jdbcType=BIGINT}
        </if>
        and dr = 1 limit 1)
        then 1
        else 0 end as result
    </select>

    <!--  将上级部门为当前输入的部门id的置空-->
    <update id="updateParentId" parameterType="java.lang.Long">
        update am_dept
        set parent_id = case parent_id
        <foreach collection="list" item="did">
            when #{did,jdbcType=BIGINT} then null
        </foreach>
        end
        where parent_id in
        <foreach collection="list" item="did" open="(" separator="," close=")">
            #{did,jdbcType=BIGINT}
        </foreach>
    </update>

    <!--  将上级部门为当前输入的部门id的置空-->
    <update id="updateBossId" parameterType="java.lang.Long">
        update am_dept
        set user_id  = case user_id
        <foreach collection="list" item="uid">
            when #{uid,jdbcType=BIGINT} then null
        </foreach>
        end
        where user_id in
        <foreach collection="list" item="uid" open="(" separator="," close=")">
            #{uid,jdbcType=BIGINT}
        </foreach>
    </update>

    <!--   根据父节点找到子节点-->
    <select id="queryByParent" resultType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from am_dept
        where parent_id = #{parentId,jdbcType=BIGINT} and dr = 1
    </select>
    <select id="queryByCode" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from am_dept where dept_code = #{deptCode, jdbcType=CHAR} limit 1
    </select>

    <insert id="batchInsert" parameterType="java.util.List" keyProperty="deptId" useGeneratedKeys="true">
        insert into am_dept (  dept_name, dept_code, user_id, `status`, create_time, dr) values
        <foreach collection="list" item = "po" separator=",">
            ( #{po.deptName,jdbcType=CHAR}, #{po.deptCode,jdbcType=CHAR},  #{po.userId,jdbcType=BIGINT},  #{po.status,jdbcType=TINYINT},
            #{po.createTime,jdbcType=TIMESTAMP},#{po.dr,jdbcType=TINYINT})
        </foreach>
    </insert>

</mapper>