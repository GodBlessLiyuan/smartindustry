<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.smartindustry.common.mapper.im.SafeStockMapper">
    <resultMap id="BaseResultMap" type="com.smartindustry.common.pojo.im.SafeStockPO">
        <id column="safe_stock_id" jdbcType="BIGINT" property="safeStockId"/>
        <result column="material_inventory_id" jdbcType="BIGINT" property="materialInventoryId"/>
        <result column="lower_limit" jdbcType="INTEGER" property="lowerLimit"/>
        <result column="way" jdbcType="TINYINT" property="way"/>
        <result column="user_id" jdbcType="BIGINT" property="userId"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    </resultMap>
    <sql id="Base_Column_List">
        safe_stock_id, material_inventory_id, lower_limit, way, user_id, create_time
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from im_safe_stock
        where safe_stock_id = #{safeStockId,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete
        from im_safe_stock
        where safe_stock_id = #{safeStockId,jdbcType=BIGINT}
    </delete>
    <insert id="insert" parameterType="com.smartindustry.common.pojo.im.SafeStockPO">
        insert into im_safe_stock (safe_stock_id, material_inventory_id, lower_limit,
                                   way, user_id, create_time)
        values (#{safeStockId,jdbcType=BIGINT}, #{materialInventoryId,jdbcType=BIGINT}, #{lowerLimit,jdbcType=INTEGER},
                #{way,jdbcType=TINYINT}, #{userId,jdbcType=BIGINT}, #{createTime,jdbcType=TIMESTAMP})
    </insert>
    <insert id="insertSelective" parameterType="com.smartindustry.common.pojo.im.SafeStockPO">
        insert into im_safe_stock
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="safeStockId != null">
                safe_stock_id,
            </if>
            <if test="materialInventoryId != null">
                material_inventory_id,
            </if>
            <if test="lowerLimit != null">
                lower_limit,
            </if>
            <if test="way != null">
                way,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="safeStockId != null">
                #{safeStockId,jdbcType=BIGINT},
            </if>
            <if test="materialInventoryId != null">
                #{materialInventoryId,jdbcType=BIGINT},
            </if>
            <if test="lowerLimit != null">
                #{lowerLimit,jdbcType=INTEGER},
            </if>
            <if test="way != null">
                #{way,jdbcType=TINYINT},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=BIGINT},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.smartindustry.common.pojo.im.SafeStockPO">
        update im_safe_stock
        <set>
            <if test="materialInventoryId != null">
                material_inventory_id = #{materialInventoryId,jdbcType=BIGINT},
            </if>
            <if test="lowerLimit != null">
                lower_limit = #{lowerLimit,jdbcType=INTEGER},
            </if>
            <if test="way != null">
                way = #{way,jdbcType=TINYINT},
            </if>
            <if test="userId != null">
                user_id = #{userId,jdbcType=BIGINT},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where safe_stock_id = #{safeStockId,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.smartindustry.common.pojo.im.SafeStockPO">
        update im_safe_stock
        set material_inventory_id = #{materialInventoryId,jdbcType=BIGINT},
            lower_limit           = #{lowerLimit,jdbcType=INTEGER},
            way                   = #{way,jdbcType=TINYINT},
            user_id               = #{userId,jdbcType=BIGINT},
            create_time           = #{createTime,jdbcType=TIMESTAMP}
        where safe_stock_id = #{safeStockId,jdbcType=BIGINT}
    </update>

    <insert id="batchInsert" parameterType="com.smartindustry.common.pojo.im.SafeStockPO">
        insert into im_safe_stock (safe_stock_id, material_inventory_id, lower_limit,
                                   way, user_id, create_time)
        values (#{safeStockId,jdbcType=BIGINT}, #{materialInventoryId,jdbcType=BIGINT}, #{lowerLimit,jdbcType=INTEGER},
                #{way,jdbcType=TINYINT}, #{userId,jdbcType=BIGINT}, #{createTime,jdbcType=TIMESTAMP})
    </insert>
    <update id="batchUpdate" parameterType="java.util.List">
        update im_safe_stock
        set
        material_inventory_id = case safe_stock_id
        <foreach collection="list" item="po">
            when #{po.safeStockId,jdbcType=BIGINT} then #{po.materialInventoryId,jdbcType=BIGINT}
        </foreach>
        end,
        lower_limit = case safe_stock_id
        <foreach collection="list" item="po">
            when #{po.safeStockId,jdbcType=BIGINT} then #{po.lowerLimit,jdbcType=INTEGER}
        </foreach>
        end,
        way = case safe_stock_id
        <foreach collection="list" item="po">
            when #{po.safeStockId,jdbcType=BIGINT} then #{po.way,jdbcType=TINYINT}
        </foreach>
        end
        where safe_stock_id in
        <foreach collection="list" item="po" open="(" separator="," close=")">
            #{po.safeStockId,jdbcType=BIGINT}
        </foreach>
    </update>
</mapper>