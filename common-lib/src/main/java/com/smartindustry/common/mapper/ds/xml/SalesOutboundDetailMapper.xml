<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.smartindustry.common.mapper.ds.SalesOutboundDetailMapper">
  <resultMap id="BaseResultMap" type="com.smartindustry.common.pojo.ds.SalesOutboundDetailPO">
    <id column="sales_outbound_detail_id" jdbcType="BIGINT" property="salesOutboundDetailId" />
    <result column="sales_outbound_id" jdbcType="BIGINT" property="salesOutboundId" />
    <result column="material_id" jdbcType="BIGINT" property="materialId" />
    <result column="need_num" jdbcType="DECIMAL" property="needNum" />
    <result column="unit_price" jdbcType="DECIMAL" property="unitPrice" />
    <result column="total_price" jdbcType="DECIMAL" property="totalPrice" />
  </resultMap>
  <sql id="Base_Column_List">
    sales_outbound_detail_id, sales_outbound_id, material_id, need_num, unit_price, total_price
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from ds_sales_outbound_detail
    where sales_outbound_detail_id = #{salesOutboundDetailId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from ds_sales_outbound_detail
    where sales_outbound_detail_id = #{salesOutboundDetailId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.smartindustry.common.pojo.ds.SalesOutboundDetailPO">
    insert into ds_sales_outbound_detail (sales_outbound_detail_id, sales_outbound_id, 
      material_id, need_num, unit_price, 
      total_price)
    values (#{salesOutboundDetailId,jdbcType=BIGINT}, #{salesOutboundId,jdbcType=BIGINT}, 
      #{materialId,jdbcType=BIGINT}, #{needNum,jdbcType=DECIMAL}, #{unitPrice,jdbcType=DECIMAL}, 
      #{totalPrice,jdbcType=DECIMAL})
  </insert>
  <insert id="insertSelective" parameterType="com.smartindustry.common.pojo.ds.SalesOutboundDetailPO">
    insert into ds_sales_outbound_detail
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="salesOutboundDetailId != null">
        sales_outbound_detail_id,
      </if>
      <if test="salesOutboundId != null">
        sales_outbound_id,
      </if>
      <if test="materialId != null">
        material_id,
      </if>
      <if test="needNum != null">
        need_num,
      </if>
      <if test="unitPrice != null">
        unit_price,
      </if>
      <if test="totalPrice != null">
        total_price,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="salesOutboundDetailId != null">
        #{salesOutboundDetailId,jdbcType=BIGINT},
      </if>
      <if test="salesOutboundId != null">
        #{salesOutboundId,jdbcType=BIGINT},
      </if>
      <if test="materialId != null">
        #{materialId,jdbcType=BIGINT},
      </if>
      <if test="needNum != null">
        #{needNum,jdbcType=DECIMAL},
      </if>
      <if test="unitPrice != null">
        #{unitPrice,jdbcType=DECIMAL},
      </if>
      <if test="totalPrice != null">
        #{totalPrice,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.smartindustry.common.pojo.ds.SalesOutboundDetailPO">
    update ds_sales_outbound_detail
    <set>
      <if test="salesOutboundId != null">
        sales_outbound_id = #{salesOutboundId,jdbcType=BIGINT},
      </if>
      <if test="materialId != null">
        material_id = #{materialId,jdbcType=BIGINT},
      </if>
      <if test="needNum != null">
        need_num = #{needNum,jdbcType=DECIMAL},
      </if>
      <if test="unitPrice != null">
        unit_price = #{unitPrice,jdbcType=DECIMAL},
      </if>
      <if test="totalPrice != null">
        total_price = #{totalPrice,jdbcType=DECIMAL},
      </if>
    </set>
    where sales_outbound_detail_id = #{salesOutboundDetailId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.smartindustry.common.pojo.ds.SalesOutboundDetailPO">
    update ds_sales_outbound_detail
    set sales_outbound_id = #{salesOutboundId,jdbcType=BIGINT},
      material_id = #{materialId,jdbcType=BIGINT},
      need_num = #{needNum,jdbcType=DECIMAL},
      unit_price = #{unitPrice,jdbcType=DECIMAL},
      total_price = #{totalPrice,jdbcType=DECIMAL}
    where sales_outbound_detail_id = #{salesOutboundDetailId,jdbcType=BIGINT}
  </update>

  <insert id="batchInsert" parameterType="java.util.List" keyProperty="salesOutboundDetailId" useGeneratedKeys="true">
    insert into ds_sales_outbound_detail ( sales_outbound_id, material_id, need_num, unit_price, total_price) values
    <foreach collection="list" item = "po" separator=",">
      (  #{po.salesOutboundId,jdbcType=BIGINT},
      #{po.materialId,jdbcType=BIGINT}, #{po.needNum,jdbcType=DECIMAL}, #{po.unitPrice,jdbcType=DECIMAL},
      #{po.totalPrice,jdbcType=DECIMAL})
    </foreach>
  </insert>
</mapper>