<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.smartindustry.common.mapper.am.RoleMapper">
  <resultMap id="BaseResultMap" type="com.smartindustry.common.pojo.am.RolePO">
    <id column="role_id" jdbcType="BIGINT" property="roleId" />
    <result column="role_name" jdbcType="CHAR" property="roleName" />
    <result column="role_code" jdbcType="CHAR" property="roleCode" />
    <result column="role_desc" jdbcType="CHAR" property="roleDesc" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="dr" jdbcType="TINYINT" property="dr" />
  </resultMap>
  <sql id="Base_Column_List">
    role_id, role_name,role_code, role_desc, `status`, create_time, update_time, dr
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from am_role
    where role_id = #{roleId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from am_role
    where role_id = #{roleId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.smartindustry.common.pojo.am.RolePO" useGeneratedKeys="true" keyProperty="roleId">
    insert into am_role (role_id, role_name,role_code, role_desc,
      `status`, create_time, update_time, 
      dr)
    values (#{roleId,jdbcType=BIGINT}, #{roleName,jdbcType=CHAR},#{roleCode,jdbcType=CHAR}, #{roleDesc,jdbcType=CHAR},
      #{status,jdbcType=TINYINT}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{dr,jdbcType=TINYINT})
  </insert>
  <insert id="insertSelective" parameterType="com.smartindustry.common.pojo.am.RolePO">
    insert into am_role
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="roleId != null">
        role_id,
      </if>
      <if test="roleName != null">
        role_name,
      </if>
      <if test="roleCode != null">
        role_code,
      </if>
      <if test="roleDesc != null">
        role_desc,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="dr != null">
        dr,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="roleId != null">
        #{roleId,jdbcType=BIGINT},
      </if>
      <if test="roleName != null">
        #{roleName,jdbcType=CHAR},
      </if>
      <if test="roleCode != null">
        #{roleCode,jdbcType=CHAR},
      </if>
      <if test="roleDesc != null">
        #{roleDesc,jdbcType=CHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="dr != null">
        #{dr,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.smartindustry.common.pojo.am.RolePO">
    update am_role
    <set>
      <if test="roleName != null">
        role_name = #{roleName,jdbcType=CHAR},
      </if>
      <if test="roleCode != null">
        role_code = #{roleCode,jdbcType=CHAR},
      </if>
      <if test="roleDesc != null">
        role_desc = #{roleDesc,jdbcType=CHAR},
      </if>
      <if test="status != null">
        `status` = #{status,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="dr != null">
        dr = #{dr,jdbcType=TINYINT},
      </if>
    </set>
    where role_id = #{roleId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.smartindustry.common.pojo.am.RolePO">
    update am_role
    set role_name = #{roleName,jdbcType=CHAR},
    role_code = #{roleCode,jdbcType=CHAR},
      role_desc = #{roleDesc,jdbcType=CHAR},
      `status` = #{status,jdbcType=TINYINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      dr = #{dr,jdbcType=TINYINT}
    where role_id = #{roleId,jdbcType=BIGINT}
  </update>

  <!--  给出所有角色列表，模糊查询-->
  <select id="selectAll" parameterType="java.lang.String" resultMap="BaseResultMap">
    select r.role_id,r.role_name
    from am_role r
    where r.dr =1 and r.status = 1
  </select>

<!--  查询所有的角色列表-->
  <select id="rolePageQuery" parameterType="java.util.Map" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from am_role
    where dr = 1
    <if test="rname != null and rname != ''">
      and role_name like concat('%',#{rname,jdbcType=CHAR},'%')
    </if>
    <if test="status != null and status != 0">
      and `status` = #{status,jdbcType=TINYINT}
    </if>
    <if test="ctime != null">
      and create_time &gt; #{ctime, jdbcType=TIMESTAMP}
    </if>
    order by create_time desc
  </select>

<!--  更新角色列表-->
  <update id="updateBatch" parameterType="java.util.List">
    update am_role
    set `status` = case role_id
    <foreach collection="list" item="item">
      when #{item.roleId,jdbcType=BIGINT} then #{item.status,jdbcType=TINYINT}
    </foreach>
    end
    where role_id in
    <foreach collection="list" item="item" open="(" separator="," close=")">
      #{item.roleId,jdbcType=BIGINT}
    </foreach>
  </update>

  <update id="deleteBatch" parameterType="java.util.List">
    update am_role
    set dr = case role_id
    <foreach collection="list" item="rid">
      when #{rid,jdbcType=BIGINT} then 2
    </foreach>
    end
    where role_id in
    <foreach collection="list" item="rid" open="(" separator="," close=")">
      #{rid,jdbcType=BIGINT}
    </foreach>
  </update>

  <!--  判断当前的角色name是否重复-->
  <select id="judgeRepeatName" resultType="java.lang.Integer">
    select case when exists(SELECT 1 from am_role
    where role_name = #{roleName,jdbcType=CHAR}
    <if test="roleId != null">
      and role_id != #{roleId,jdbcType=BIGINT}
    </if>
    and dr = 1 limit 1)
    then 1
    else 0 end as result
  </select>

  <select id="queryByCode" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from am_role where role_code = #{roleCode, jdbcType=CHAR} limit 1
  </select>

  <insert id="batchInsert" parameterType="java.util.List" keyProperty="roleId" useGeneratedKeys="true">
    insert into am_role (   role_name,role_code, `status`, create_time, dr) values
    <foreach collection="list" item = "po" separator=",">
      (  #{po.roleName,jdbcType=CHAR},#{po.roleCode,jdbcType=CHAR},   #{po.status,jdbcType=TINYINT},
      #{po.createTime,jdbcType=TIMESTAMP},#{po.dr,jdbcType=TINYINT})
    </foreach>
  </insert>
</mapper>