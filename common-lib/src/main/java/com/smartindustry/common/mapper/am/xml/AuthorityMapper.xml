<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.smartindustry.common.mapper.am.AuthorityMapper">
  <resultMap id="BaseResultMap" type="com.smartindustry.common.pojo.am.AuthorityPO">
    <id column="authority_id" jdbcType="BIGINT" property="authorityId" />
    <result column="authority_name" jdbcType="CHAR" property="authorityName" />
    <result column="type" jdbcType="TINYINT" property="type" />
    <result column="parent_id" jdbcType="BIGINT" property="parentId" />
  </resultMap>
  <sql id="Base_Column_List">
    authority_id, authority_name, `type`, parent_id
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from am_authority
    where authority_id = #{authorityId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from am_authority
    where authority_id = #{authorityId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.smartindustry.common.pojo.am.AuthorityPO">
    insert into am_authority (authority_id, authority_name, `type`, 
      parent_id)
    values (#{authorityId,jdbcType=BIGINT}, #{authorityName,jdbcType=CHAR}, #{type,jdbcType=TINYINT}, 
      #{parentId,jdbcType=BIGINT})
  </insert>
  <insert id="insertSelective" parameterType="com.smartindustry.common.pojo.am.AuthorityPO">
    insert into am_authority
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="authorityId != null">
        authority_id,
      </if>
      <if test="authorityName != null">
        authority_name,
      </if>
      <if test="type != null">
        `type`,
      </if>
      <if test="parentId != null">
        parent_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="authorityId != null">
        #{authorityId,jdbcType=BIGINT},
      </if>
      <if test="authorityName != null">
        #{authorityName,jdbcType=CHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=TINYINT},
      </if>
      <if test="parentId != null">
        #{parentId,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.smartindustry.common.pojo.am.AuthorityPO">
    update am_authority
    <set>
      <if test="authorityName != null">
        authority_name = #{authorityName,jdbcType=CHAR},
      </if>
      <if test="type != null">
        `type` = #{type,jdbcType=TINYINT},
      </if>
      <if test="parentId != null">
        parent_id = #{parentId,jdbcType=BIGINT},
      </if>
    </set>
    where authority_id = #{authorityId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.smartindustry.common.pojo.am.AuthorityPO">
    update am_authority
    set authority_name = #{authorityName,jdbcType=CHAR},
      `type` = #{type,jdbcType=TINYINT},
      parent_id = #{parentId,jdbcType=BIGINT}
    where authority_id = #{authorityId,jdbcType=BIGINT}
  </update>

<!--  根据userid获取当前用户权限-->
  <select id="queryPermsByUserId" parameterType="java.lang.Long" resultType="java.lang.String">
    select distinct authority_name
    from am_m_user_authority
    where user_id = #{userId,jdbcType=BIGINT}
  </select>

<!--  得到所有的权限列表-->
  <select id="queryAllPerm" resultType="java.lang.String">
    select authority_name
    from am_authority
  </select>

  <!--  判断当前权限id不是其他权限的父节点id-->
  <select id="judgeExist" parameterType="java.lang.Long" resultType="java.lang.Integer">
     select case when exists(SELECT 1 from am_authority where parent_id = #{parentId,jdbcType=BIGINT} and `type` = 1 limit 1)
     then 1
     else 0 end as result
  </select>

<!--  查询当前权限节点的用户有的子节点,限菜单权限-->
  <select id="queryChildren"  resultType="com.smartindustry.common.bo.am.AuthorityBO">
    select mua.authority_id as authorityId,mua.authority_name as authorityName,au.type as type,au.parent_id as parentId,au1.authority_name as parentName
    from am_m_user_authority mua
    left join am_authority au on mua.authority_id = au.authority_id
    left join am_authority au1 on au.parent_id = au1.authority_id
    <choose>
      <when test="parentId != null and parentId !=0">
        where au.parent_id = #{parentId,jdbcType=BIGINT} and mua.user_id = #{userId,jdbcType=BIGINT} and au.type = 1
      </when>
      <otherwise>
        where au.parent_id = 0 and au.type = 1 and mua.user_id = #{userId,jdbcType=BIGINT}
      </otherwise>
    </choose>
  </select>
</mapper>